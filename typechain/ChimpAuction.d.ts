/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ChimpAuctionInterface extends ethers.utils.Interface {
  functions: {
    "bidChimp(uint256)": FunctionFragment;
    "chimpsOnAuction(uint256)": FunctionFragment;
    "collectRoyalties()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "putOnAuction(uint256,uint256,uint256)": FunctionFragment;
    "removeFromAuction(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "tokenContract()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uncollectedRoyalties()": FunctionFragment;
    "winChimpAuction(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bidChimp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chimpsOnAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectRoyalties",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "putOnAuction",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uncollectedRoyalties",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "winChimpAuction",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bidChimp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chimpsOnAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "putOnAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uncollectedRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winChimpAuction",
    data: BytesLike
  ): Result;

  events: {
    "BidChimp(uint256,uint256,address,uint256)": EventFragment;
    "CollectRoyalties(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PutChimpOnAuction(uint256,address,uint256,uint256)": EventFragment;
    "RefundBid(uint256,uint256,address)": EventFragment;
    "RemoveFromAuction(uint256,address)": EventFragment;
    "WinChimpAuction(uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BidChimp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectRoyalties"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PutChimpOnAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveFromAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinChimpAuction"): EventFragment;
}

export type BidChimpEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber] & {
    tokenId: BigNumber;
    bid: BigNumber;
    from: string;
    auctionEndTime: BigNumber;
  }
>;

export type CollectRoyaltiesEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PutChimpOnAuctionEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber] & {
    tokenId: BigNumber;
    seller: string;
    startingBid: BigNumber;
    auctionEndTime: BigNumber;
  }
>;

export type RefundBidEvent = TypedEvent<
  [BigNumber, BigNumber, string] & {
    tokenId: BigNumber;
    amount: BigNumber;
    recipient: string;
  }
>;

export type RemoveFromAuctionEvent = TypedEvent<
  [BigNumber, string] & { tokenId: BigNumber; seller: string }
>;

export type WinChimpAuctionEvent = TypedEvent<
  [BigNumber, BigNumber, string] & {
    tokenId: BigNumber;
    price: BigNumber;
    winner: string;
  }
>;

export class ChimpAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ChimpAuctionInterface;

  functions: {
    bidChimp(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chimpsOnAuction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, string, BigNumber, string, BigNumber] & {
        isOnAuction: boolean;
        auctionEndTime: BigNumber;
        highestBid: BigNumber;
        highestBidder: string;
        tokenId: BigNumber;
        seller: string;
        startingBid: BigNumber;
      }
    >;

    collectRoyalties(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    putOnAuction(
      tokenId: BigNumberish,
      startingBid: BigNumberish,
      auctionEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeFromAuction(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenContract(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uncollectedRoyalties(overrides?: CallOverrides): Promise<[BigNumber]>;

    winChimpAuction(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bidChimp(
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chimpsOnAuction(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, string, BigNumber, string, BigNumber] & {
      isOnAuction: boolean;
      auctionEndTime: BigNumber;
      highestBid: BigNumber;
      highestBidder: string;
      tokenId: BigNumber;
      seller: string;
      startingBid: BigNumber;
    }
  >;

  collectRoyalties(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  putOnAuction(
    tokenId: BigNumberish,
    startingBid: BigNumberish,
    auctionEndTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeFromAuction(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenContract(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uncollectedRoyalties(overrides?: CallOverrides): Promise<BigNumber>;

  winChimpAuction(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bidChimp(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    chimpsOnAuction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, string, BigNumber, string, BigNumber] & {
        isOnAuction: boolean;
        auctionEndTime: BigNumber;
        highestBid: BigNumber;
        highestBidder: string;
        tokenId: BigNumber;
        seller: string;
        startingBid: BigNumber;
      }
    >;

    collectRoyalties(overrides?: CallOverrides): Promise<void>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    putOnAuction(
      tokenId: BigNumberish,
      startingBid: BigNumberish,
      auctionEndTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromAuction(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    tokenContract(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uncollectedRoyalties(overrides?: CallOverrides): Promise<BigNumber>;

    winChimpAuction(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BidChimp(uint256,uint256,address,uint256)"(
      tokenId?: null,
      bid?: null,
      from?: null,
      auctionEndTime?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber],
      {
        tokenId: BigNumber;
        bid: BigNumber;
        from: string;
        auctionEndTime: BigNumber;
      }
    >;

    BidChimp(
      tokenId?: null,
      bid?: null,
      from?: null,
      auctionEndTime?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber],
      {
        tokenId: BigNumber;
        bid: BigNumber;
        from: string;
        auctionEndTime: BigNumber;
      }
    >;

    "CollectRoyalties(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    CollectRoyalties(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PutChimpOnAuction(uint256,address,uint256,uint256)"(
      tokenId?: null,
      seller?: null,
      startingBid?: null,
      auctionEndTime?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        tokenId: BigNumber;
        seller: string;
        startingBid: BigNumber;
        auctionEndTime: BigNumber;
      }
    >;

    PutChimpOnAuction(
      tokenId?: null,
      seller?: null,
      startingBid?: null,
      auctionEndTime?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        tokenId: BigNumber;
        seller: string;
        startingBid: BigNumber;
        auctionEndTime: BigNumber;
      }
    >;

    "RefundBid(uint256,uint256,address)"(
      tokenId?: null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { tokenId: BigNumber; amount: BigNumber; recipient: string }
    >;

    RefundBid(
      tokenId?: null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { tokenId: BigNumber; amount: BigNumber; recipient: string }
    >;

    "RemoveFromAuction(uint256,address)"(
      tokenId?: null,
      seller?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { tokenId: BigNumber; seller: string }
    >;

    RemoveFromAuction(
      tokenId?: null,
      seller?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { tokenId: BigNumber; seller: string }
    >;

    "WinChimpAuction(uint256,uint256,address)"(
      tokenId?: null,
      price?: null,
      winner?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { tokenId: BigNumber; price: BigNumber; winner: string }
    >;

    WinChimpAuction(
      tokenId?: null,
      price?: null,
      winner?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { tokenId: BigNumber; price: BigNumber; winner: string }
    >;
  };

  estimateGas: {
    bidChimp(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chimpsOnAuction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectRoyalties(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    putOnAuction(
      tokenId: BigNumberish,
      startingBid: BigNumberish,
      auctionEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeFromAuction(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenContract(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uncollectedRoyalties(overrides?: CallOverrides): Promise<BigNumber>;

    winChimpAuction(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bidChimp(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chimpsOnAuction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectRoyalties(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    putOnAuction(
      tokenId: BigNumberish,
      startingBid: BigNumberish,
      auctionEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeFromAuction(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uncollectedRoyalties(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    winChimpAuction(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
